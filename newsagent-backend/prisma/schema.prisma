// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id       String  @id @default(uuid())
  headline String
  content  String?

  sources ArticleSource[]

  category String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleSource {
  id String @id @default(uuid())

  Article   Article? @relation(fields: [articleId], references: [id])
  articleId String?

  Source   Source? @relation(fields: [sourceId], references: [id])
  sourceId String?

  articleDescription String?
  articleImage       String?
  articlePublishedAt DateTime?
  articleTitle       String?
  articleUrl         String?   @unique

  misinfoScore Float?

  sourceIdentifier String?
  isProcessed      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Source {
  id         String          @id @default(uuid())
  name       String
  favicon    String?
  rssFeed    String          @unique
  articles   ArticleSource[]
  UserSource UserSource[]
}

model UserSource {
  id        String  @id @default(uuid())
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
  Source    Source? @relation(fields: [sourceId], references: [id])
  sourceId  String?
  frequency Int?
}

model User {
  id               String       @id @default(uuid())
  email            String       @unique
  name             String       @default("Newsagent User")
  password         String?
  preferredSources UserSource[]
  tokens           UserTokens[]

  favouriteCategories String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserTokens {
  id    String @id @default(uuid())
  token String @unique

  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
